@using System.Globalization
@model DetailModel

@{
    ViewBag.Title = "For Movie Studios";
    Layout = "_Layout";
    var colorSet = new[] {"#f44336", "#e81e63", "#9c27b0", "#673ab7",
                            "#3f51b5", "#2196f3", "#03a9f4", "#00bcd4",
                            "#009688", "#4caf50", "#8bc34a", "#cddc39",
                            "#ffeb3b", "#ffc107", "#ff9800", "#ff5722",
                            "#795548", "#9e9e9e", "#607d8b", "#000000"}
;
}

<div class="row justify-content-center">
    <div class="col-3 text-center">
        <h5>Total Movies</h5>
        <h2><strong>@Model.CountryInfo.MovieCount</strong></h2>
    </div>
    <div class="col-3 text-center">
        <h5>Total Votes</h5>
        <h2><strong>@Model.CountryInfo.VoteCount</strong></h2>
    </div>
    <div class="col-3 text-center">
        <h5>Vote Average</h5>
        <h2><strong>@Model.CountryInfo.VoteAvg</strong></h2>
    </div>
    <div class="col-3 text-center align-middle">
        <h5>Country</h5>
        <h2><strong>@(Model.CountryInfo.Code == "US" ? "USA" : @Model.CountryInfo.Name)</strong></h2>
    </div>
    @*<div class="col-2 text-center align-middle">
        <a class="btn btn-block btn-outline-success" asp-action="MovieRanking" asp-route-countryCode="@Model.CountryInfo.Code">Movie Ranking</a>
        <a class="btn btn-block btn-outline-danger" asp-action="ActorRanking" asp-route-countryCode="@Model.CountryInfo.Code">Actor Ranking</a>
    </div>*@
</div>
<hr/>
<div class="row">
    <div class="col-7">
        <div class="row pb-2">
            <div id="pie-charts" class="col-6 p-0">
                <div id="pie-chart-1"></div>
                <div id="pie-chart-2"></div>
            </div>
            <div id="pie-lengends" class="col-6 p-0">
                 <table class="table table-bordered table-hover table-sm">
                    <thead>
                    <tr>
                        <th scope="col" style="text-align: center">Category</th>
                        <th scope="col" style="text-align: center">Movie Count</th>
                        <th scope="col" style="text-align: center">Revenue</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < Model.PieChartData.Count; ++i)
                    {
                        var data = Model.PieChartData[i];
                        <tr onmouseover="@($"inOpa('{data.Type}')")"
                            onmouseout="@($"outOpa('{data.Type}')")"
                            style="cursor: pointer;">
                            <td class="align-middle">
                                <a class="dot"
                                   style="background-color: @colorSet[i % colorSet.Length];">
                                </a>&nbsp;@data.Type
                            </td>
                            <td class="align-middle" align="right">@(data.MovieCount + (data.MovieCount > 1 ? " movies" : " movie"))</td>
                            <td class="align-middle" align="right">@(data.Revenue.ToString("C0", new CultureInfo("en-us")))</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-5">
        <div id="pyramid-chart" class="mb-1"></div>
        <!-- Extra large modal -->
        <button type="button" class="btn btn-block btn-outline-primary mt-0 mb-5" data-toggle="modal" data-target=".bd-example-modal-xl">Show Heat map by Year and Month</button>

        <div class="modal fade bd-example-modal-xl" tabindex="-1" role="dialog" aria-labelledby="myExtraLargeModalLabel" aria-hidden="true">
          <div class="modal-dialog modal-xl">
            <div class="modal-content">
              <div id="heat-chart"></div>
            </div>
          </div>
        </div>
    </div>
</div>
<div id="bar-line-chart"></div>

@section Scripts{
    <script src="~/lib/apex/dist/apexcharts.min.js"></script>
    <script>
        var colorSet = @Html.Raw(Json.Serialize(colorSet));
        var pieChartSeriesMovieCount = @Html.Raw(Json.Serialize(@Model.PieChartData.Select(d => d.MovieCount)));
        var pieChartSeriesRevenue = @Html.Raw(Json.Serialize(@Model.PieChartData.Select(d => d.Revenue)));
        var pieChartLabels = @Html.Raw(Json.Serialize(Model.PieChartData.Select(d => d.Type)));

        var pieChart1 = new ApexCharts(document.querySelector("#pie-chart-1"),
            {
                title: {
                    text: 'Movie Count by Category',
                    align: 'center'
                },
                series: pieChartSeriesMovieCount,
                chart: {
                    type: 'pie'
                },
                stroke: {
                    width: 1
                },
                labels: pieChartLabels,
                legend: {
                    show: false,
                    position: 'right',
                    formatter: function(seriesName, opts) {
                        return [seriesName, " - ", opts.w.globals.series[opts.seriesIndex]];
                    }
                },
                colors: colorSet
            });
        pieChart1.render();

        var pieChart2 = new ApexCharts(document.querySelector("#pie-chart-2"),
            {
                title: {
                    text: 'Revenue by Category',
                    align: 'center'
                },
                series: pieChartSeriesRevenue,
                chart: {
                    type: 'pie'
                },
                stroke: {
                    width: 1
                },
                labels: pieChartLabels,
                yaxis: {
                    labels: {
                        formatter: function(val) {
                            return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD'  }).format(val);
                        }
                    }
                },
                legend: {
                    show: false,
                    position: 'right',
                    formatter: function(seriesName, opts) {
                        return [seriesName, " - ", opts.w.globals.series[opts.seriesIndex]];
                    }
                },
                colors: colorSet
            });
        pieChart2.render();

        function inOpa(val) {
            pieChart1.toggleSeries(val);
            pieChart2.toggleSeries(val);
        }

        function outOpa(val) {
            pieChart1.toggleSeries(val);
            pieChart2.toggleSeries(val);
        }

        var barLineCategory = @Html.Raw(Json.Serialize(@Model.LineChartData.Region.Select(d => d.Runtime)));
        var barLineChart = new ApexCharts(document.querySelector("#bar-line-chart"),
            {
                series: [
                    {
                        name: "@Model.CountryInfo.Name Movie Count",
                        type: "column",
                        data: @Html.Raw(Json.Serialize(@Model.HistogramChartData.Select(d => d.MovieCount)))
                    },
                    {
                        name: "@Model.CountryInfo.Name Popularity",
                        type: "line",
                        data: @Html.Raw(Json.Serialize(@Model.LineChartData.Region.Select(d => d.Popularity)))
                    }
                ],
                chart: {
                    type: 'line',
                    height: 650,
                    stacked: false,
                    zoom: {
                        enabled: true,
                        autoScaleYaxis: true,
                    }
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    curve: 'smooth',
                    width: [1, 4]
                },
                title: {
                    text: 'Popularity and Movie Count by Length',
                    align: 'center'
                },
                xaxis: {
                    categories: barLineCategory,
                    labels: {
                        hideOverlappingLabels: true,
                        showDuplicates: false,
                        formatter: function (val) {
                            return (val != null && val > 1 && val % 5 == 0) ? val + ' min' : '';
                        }
                    }
                },
                yaxis:[
                    {
                        axisTicks: {
                            show: true,
                        },
                        axisBorder: {
                            show: true,
                            color: '#000000'
                        },
                        labels: {
                            style: {
                                colors: '#000000',
                            },
                            formatter: function(value) {
                                return value > 1 ? value + ' movies' : value + ' movie';
                            }
                        },
                        title: {
                            text: "Movie Count",
                            style: {
                                color: '#000000',
                            }
                        },
                        tooltip: {
                            enabled: false
                        }
                    },
                    {
                        seriesName: '@Model.CountryInfo.Name Popularity',
                        opposite: true,
                        axisTicks: {
                            show: true,
                        },
                        axisBorder: {
                            show: true,
                            color: '#000000'
                        },
                        labels: {
                        },
                        title: {
                            text: "Popularity Point"
                        },
                    }
                ],
                tooltip: {
                    shared: true,
                    x: {
                        formatter: function(val) {
                            return val > 1 ? val + ' minutes' : val + 'minute';
                        }
                    }
                },
                legend: {
                    horizontalAlign: 'right',
                    position: 'top',
                    offsetX: 40
                },
                colors: ['#0B83A5','#F6C860']
            });
        barLineChart.render();
        barLineChart.zoomX(80,200);

        var pyramidChart = new ApexCharts(document.querySelector("#pyramid-chart"),
            {
                series: [
                    {
                        name: "@Model.CountryInfo.Name",
                        data: @Html.Raw(Json.Serialize(@Model.PyramidChartData.Region.Select(d => int.Parse(d.MovieCount))))
                    },
                    {
                        name: "All",
                        data: @Html.Raw(Json.Serialize(@Model.PyramidChartData.All.Select(d => 0 - int.Parse(d.MovieCount))))
                    }
                ],
                chart: {
                    type: 'bar',
                    stacked: true,
                    height: '100%',
                    zoom: {
                        enabled: true
                    }
                },
                colors: ['#008FFB', '#FF4560'],
                plotOptions: {
                    bar: {
                        horizontal: true,
                        barHeight: '80%'
                    }
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    show: false,
                    width: 1,
                    colors: ["#fff"]
                },
                grid: {
                    xaxis: {
                        lines: {
                            show: false
                        }
                    }
                },
                tooltip: {
                    shared: false,
                    x: {
                        formatter: function(val) {
                            return val;
                        }
                    },
                    y: {
                        formatter: function(val) {
                            return Math.abs(val) > 1 ? Math.abs(val) + " movies" : Math.abs(val) + " movie";
                        }
                    }
                },
                title: {
                    text: 'Movie Count by Year',
                    align: 'center'
                },
                yaxis: {
                    labels: {
                        formatter: function (val) {
                            return (val % 5 == 0) ? val : '';
                        }
                    }
                },
                xaxis: {
                    categories: @Html.Raw(Json.Serialize(@Model.PyramidChartData.All.Select(d => int.Parse(!string.IsNullOrEmpty(d.Year) ? d.Year : "0")))),
                    title: {
                        text: 'Movie'
                    },
                    labels: {
                        hideOverlappingLabels: true,
                        showDuplicates: false,
                        tickAmount: 10,
                        formatter: function(val) {
                            return Math.abs(val) > 1 ? Math.abs(val) + " movies" : Math.abs(val) + " movie";
                        }
                    }
                }
            });
        pyramidChart.render();
         var heatChart = new ApexCharts(document.querySelector("#heat-chart"),
            {
                series: @Html.Raw(Json.Serialize(@Model.HeatChartData.Region.Select(d => new { name = int.Parse(d.Year), data = d.Data}))),
                chart: {
                    height: 800,
                    type: 'heatmap'
                },
                dataLabels: {
                    enabled: false
                },

                xaxis: {
                    type: 'category',
                    categories: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12']
                },
                yaxis: {
                    forceNiceScale: true,
                    labels: {
                        formatter: function (val) {
                            return (val % 5 == 0) ? val : '';
                        }
                    }
                },
                title: {
                    text: 'Movie Count by Year and Month',
                    align: 'center'
                },
                grid: {
                    padding: {
                        right: 20
                    }
                },
                tooltip: {
                    shared: false,
                    x: {
                        formatter: function(val) {
                            return val;
                        }
                    },
                    y: {
                        formatter: function(val) {
                            return Math.abs(val) > 1 ? Math.abs(val) + " movies" : Math.abs(val) + " movie";
                        }
                    }
                },
                plotOptions: {
                    heatmap: {
                        colorScale: {
                            ranges: [
                                {
                                    from: -30,
                                    to: 0,
                                    color: '#9e9e9e',
                                    name: 'none'
                                },
                                {
                                    from: 1,
                                    to: 5,
                                    color: '#00A100',
                                    name: 'low'
                                },
                                {
                                    from: 6,
                                    to: 49,
                                    color: '#FFB200',
                                    name: 'medium'
                                },
                                {
                                    from: 50,
                                    to: 500,
                                    color: '#FF0000',
                                    name: 'high'
                                }
                            ]
                        }
                    }
                }
            });
        heatChart.render();
    </script>
}