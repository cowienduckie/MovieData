@model DetailModel

@{
    ViewBag.Title = "Map";
    Layout = "_Layout";
}

<div class="row">
    <div class="col-3 text-center">
        <h5>Total movies</h5>
        <h2><strong>@Model.CountryInfo.MovieCount</strong></h2>
    </div>
    <div class="col-3 text-center">
        <h5>Total votes</h5>
        <h2><strong>@Model.CountryInfo.VoteCount</strong></h2>
    </div>
    <div class="col-3 text-center">
        <h5>Vote Average</h5>
        <h2><strong>@Model.CountryInfo.VoteAvg</strong></h2>
    </div>
    <div class="col-3 text-center align-middle">
        <h5>Country</h5>
        <h2><strong>@Model.CountryInfo.Name</strong></h2>
    </div>
</div>
<hr/>
<div class="row">
    <div class="col-5">
        <h5 class="text-center">Ranking</h5>
        <table class="table table-hover table-bordered table-striped">
            <thead>
            <tr>
                <th scope="col" style="text-align: center">Top</th>
                <th scope="col" style="text-align: center">Name</th>
                <th scope="col" style="text-align: center">Popularity</th>
                <th scope="col" style="text-align: center">Budget</th>
            </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.FilmData.Count; i++)
                {
                    var film = Model.FilmData[i];
                    <tr>
                        <th scope="row" class="align-middle" style="text-align: center">@(i+1)</th>
                        <td class="align-middle">@film.Title</td>
                        <td class="align-middle" align="center">@film.Popularity</td>
                        <td class="align-middle" align="center">@film.Budget</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-7">
        <div class="row py-5">
            <div id="pie-chart-1" class="col-4 p-0"></div>
            <div id="pie-chart-2" class="col-4 p-0"></div>
            <div id="pie-chart-3" class="col-4 p-0"></div>
        </div>
        <div class="row py-5">
            <div class="col-6 p-0">
                <div id="line-chart"></div>
                <br/>
                <br/>
                <div id="histogram-chart"></div>
            </div>
            <div class="col-6 p-0">
                <div id="pyramid-chart"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script>
        var pieChart1 = new ApexCharts(document.querySelector("#pie-chart-1"),
            {
                title: {
                    text: 'Movies count by Category',
                    align: 'center'
                },
                series:  @Html.Raw(Json.Serialize(@Model.PieChartData.Select(d => d.MovieCount))),
                chart: {
                    type: 'pie'
                },
                labels: @Html.Raw(Json.Serialize(@Model.PieChartData.Select(d => d.Type))),
                legend: {
                    show: false,
                    position: 'bottom'
                }
            });
        pieChart1.render();

        var pieChart2 = new ApexCharts(document.querySelector("#pie-chart-2"),
            {
                title: {
                    text: 'Popularity by Category',
                    align: 'center'
                },
                series:  @Html.Raw(Json.Serialize(@Model.PieChartData.Select(d => d.Popularity))),
                chart: {
                    type: 'pie'
                },
                labels: @Html.Raw(Json.Serialize(@Model.PieChartData.Select(d => d.Type))),
                legend: {
                    show: false,
                    position: 'bottom'
                }
            });
        pieChart2.render();

        var pieChart3 = new ApexCharts(document.querySelector("#pie-chart-3"),
            {
                title: {
                    text: 'Votes count by Category',
                    align: 'center'
                },
                series:  @Html.Raw(Json.Serialize(@Model.PieChartData.Select(d => d.VoteCount))),
                chart: {
                    type: 'pie'
                },
                labels: @Html.Raw(Json.Serialize(@Model.PieChartData.Select(d => d.Type))),
                legend: {
                    show: false,
                    position: 'bottom'
                }
            });
        pieChart3.render();

        var lineChart = new ApexCharts(document.querySelector("#line-chart"),
            {
                series: [{
                    name: "@Model.CountryInfo.Name",
                    data:  @Html.Raw(Json.Serialize(@Model.LineChartData.Region.Select(d => d.Popularity)))
                },
                {
                    name: "All",
                    data:  @Html.Raw(Json.Serialize(@Model.LineChartData.All.Select(d => d.Popularity)))
                }],
                chart: {
                    type: 'line',
                    zoom: {
                        enabled: true
                    }
                },
                dataLabels: {
                    enabled: false
                },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return value;
                        }
                    },
                },
                xaxis: {
                    categories: @Html.Raw(Json.Serialize(@Model.LineChartData.Region.Select(d => d.Runtime))),
                    labels: {
                        formatter: function (value) {
                            return value > 1 ? value + ' minutes' : value + ' minute';
                        }
                    }
                },
                stroke: {
                    curve: 'smooth',
                    width: 1,
                },
                title: {
                    text: 'Popularity by Length',
                    align: 'center'
                },
                grid: {
                    row: {
                        colors: ['#f3f3f3', 'transparent'],
                        opacity: 0.5
                    },
                },
            });
        lineChart.render();

        var histogramChart = new ApexCharts(document.querySelector("#histogram-chart"),
            {
                series: [{
                    name: "@Model.CountryInfo.Name",
                    data:  @Html.Raw(Json.Serialize(@Model.HistogramChartData.Select(d => d.MovieCount)))
                    }
                ],
                chart: {
                    type: 'bar',
                    zoom: {
                        enabled: true
                    }
                },
                plotOptions: {
                    bar: {
                        columnWidth: '100%',
                    }
                },
                dataLabels: {
                    enabled: false
                },
                title: {
                    text: 'Movie count by Length',
                    align: 'center'
                },
                yaxis: {
                    labels: {
                        formatter: function(value) {
                            return value > 1 ? value + ' movies' : value + ' movie';
                        }
                    },
                },
                xaxis: {
                    categories: @Html.Raw(Json.Serialize(@Model.HistogramChartData.Select(d => d.RunTime ?? 0.0m))),
                    labels: {
                        formatter: function(value) {
                            return value > 1 ? value + ' minutes' : value + ' minute';
                        }
                    }
                }
            });
        histogramChart.render();

        var pyramidChart = new ApexCharts(document.querySelector("#pyramid-chart"),
            {
                series: [
                    {
                        name: "@Model.CountryInfo.Name",
                        data:  @Html.Raw(Json.Serialize(@Model.PyramidChartData.Region.Select(d => int.Parse(d.MovieCount))))
                    },
                    {
                        name: "All",
                        data:  @Html.Raw(Json.Serialize(@Model.PyramidChartData.All.Select(d => 0 - int.Parse(d.MovieCount))))
                    }
                ],
                chart: {
                    type: 'bar',
                    stacked: true,
                    height: '700',
                    zoom: {
                        enabled: true
                    }
                },
                colors: ['#008FFB', '#FF4560'],
                plotOptions: {
                    bar: {
                        horizontal: true,
                        barHeight: '80%',
                    },
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    show: false,
                    width: 1,
                    colors: ["#fff"]
                },
                grid: {
                    xaxis: {
                        lines: {
                            show: false
                        }
                    }
                },
                tooltip: {
                    shared: false,
                    x: {
                        formatter: function (val) {
                            return val;
                        }
                    },
                    y: {
                        formatter: function (val) {
                            return Math.abs(val) > 1 ? Math.abs(val) + " movies" : Math.abs(val) + " movie";
                        }
                    }
                },
                title: {
                    text: 'Movie count by Year',
                    align: 'center'
                },
                yaxis: {
                    labels: {
                        show: false
                    }
                },
                xaxis: {
                    categories: @Html.Raw(Json.Serialize(@Model.PyramidChartData.All.Select(d => d.Year))),
                    title: {
                        text: 'Movie'
                    },
                    labels: {
                        formatter: function (val) {
                            return Math.abs(val) > 1 ? Math.abs(val) + " movies" : Math.abs(val) + " movie";
                        }
                    }
                },
            });
        pyramidChart.render();
    </script>
}